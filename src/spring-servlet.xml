<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd 
    http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
  

	<!-- 启动扫描com下所有的controller，自动注册为bean -->
	<context:component-scan base-package="com.focusCloud.controller" />
	<!--<context:component-scan base-package="com.focusCloud.task" />
	--><!-- 获取spring mvc 提供的注解驱动特性 -->
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />

	<!-- 发生异常 -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">error</prop>
			</props>
		</property>
	</bean>


	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 连接池启动时的初始值 -->
		<property name="initialSize" value="10" />
		<!-- 连接池的最大值 -->
		<property name="maxActive" value="30" />
		<!-- 最大空闲值.当经过一个高峰时间后， 连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="maxIdle" value="60" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="minIdle" value="10" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="18000000" />
		<property name="testOnBorrow" value="true" />
	</bean>

	<!-- mybatis sessionFactory 数据库session工厂 -->
	<bean id="sqlsessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:com/focusCloud/mapping/*.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 直接注入 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlsessionFactory" />
		<property name="basePackage" value="com.focusCloud.dao" />
	</bean>

	<!--
		jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/jsp/目录下，查找XXX.jsp文件
	-->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- json支持 -->
	<bean id="messageAdapter"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- Support JSON -->
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="exceptionMessageAdapter"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
		<property name="messageConverters">
			<list>
				<!-- Support JSON -->
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- 配置Spring的事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"
				read-only="false" />
			<tx:method name="append*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="insert*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="save*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="modify*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="edit*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="repair" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="delAndRepair" propagation="REQUIRED"
				rollback-for="java.lang.Exception" read-only="false" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="false" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="false" />
			<tx:method name="load*" propagation="SUPPORTS" read-only="false" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="false" />
			<tx:method name="datagrid*" propagation="SUPPORTS"
				read-only="false" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.focusCloud.service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

</beans>
